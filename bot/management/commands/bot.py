from django.core.management.base import BaseCommand
from django.conf import settings
from telegram import InlineKeyboardMarkup, KeyboardButton, Update, Bot, ReplyKeyboardMarkup
from telegram.ext import Updater, Filters, CommandHandler, MessageHandler, CallbackQueryHandler, CallbackContext
from telegram.utils.request import Request
from bot.management.commands.utils import get_botuser_object_or_None, create_inline_buttons
from bot.models import BotUser
from core.models import Factory, FactoryApplication, ServiceCenterRequest, SpecialTechnique, \
    SpecialTechniqueApplication, SpecialTechniqueCategory

group_username = '@ShantuiReferencesChannel'

echo_field = dict()
users = dict()


def start(update: Update, context: CallbackContext) -> None:
    global echo_field
    user_id = update.message.from_user.id
    print(user_id)
    user = get_botuser_object_or_None(user_id)
    if user != None:
        keyboard = create_inline_buttons([
            {'name': "–°–ø–µ—Ü –¢–µ—Ö–Ω–∏–∫–∞ üöú", "data": "special-technique-category", "new_line": False},
            {'name': "–ó–∞–≤–æ–¥—ã üèó", "data": "factories", "new_line": True},
            {'name': "–°–µ—Ä–≤–∏—Å –¶–µ–Ω—Ç—Ä üîß", "data": "service-center", "new_line": False},
            {'name': "–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ üìí", "data": "catalog", "new_line": True},
            {'name': "–û –Ω–∞—Å üõ°", "data": "about", "new_line": False},
        ])
        update.message.reply_html(f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        echo_field[f"{user_id}"] = "first_name"
        update.message.reply_html(text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è")


def echo(update: Update, context: CallbackContext) -> None:
    global echo_field, users
    msg = update.message.text
    user_id = update.message.chat_id
    print(user_id)
    e_field = echo_field.get(f"{user_id}")
    if e_field == "first_name":
        user = BotUser(telegram_id=user_id, first_name=msg)
        users[f'{user_id}'] = user
        echo_field[f"{user_id}"] = "last_name"
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é")
    elif e_field == "last_name":
        users[f'{user_id}'].last_name = msg

        reply_markup = ReplyKeyboardMarkup([[KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True)]],
                                           resize_keyboard=True)
        echo_field[f"{user_id}"] = "phone"
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=reply_markup)
    elif e_field == "phone":
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact=True)]],
                                           resize_keyboard=True)

        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ', reply_markup=reply_markup)
    else:
        update.message.reply_text(update.message.text)


def inline_buttons(update: Update, context: CallbackContext) -> None:
    global group_username
    query = update.callback_query
    user_id = query.from_user.id
    user = get_botuser_object_or_None(id=user_id)
    if user == None:
        start(update, context)
    if query.data == "plus":
        obj = ServiceCenterRequest.objects.create(user=user)
        query.answer(text=f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å! ‚úÖ', show_alert=True)
        context.bot.send_message(chat_id=group_username, parse_mode="html",
                                 text='<b>{}</b>\n<b>üë§–ò–º—è:</b> {}\n<b>üìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {} '.format(
                                     '–°–µ—Ä–≤–∏—Å –¶–µ–Ω—Ç—Ä üîß', user.get_full_name, user.phone_number))


    elif query.data.split('/')[0] in ('rst', 'rf'):
        id = int(query.data.split('/')[1])
        if query.data.split('/')[0] == 'rst':
            object = SpecialTechnique.objects.get(id=id)
            obj = SpecialTechniqueApplication.objects.create(specialTechnique=object, user=user)
            context.bot.send_message(chat_id=group_username, parse_mode="html",
                                     text='<b>–°–ø–µ—Ü –¢–µ—Ö–Ω–∏–∫–∏ üöú</b>\n<b>{}</b>:{}\n<b>üë§–ò–º—è:</b> {}\n<b>üìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {} '
                                     .format(object.category.name, object.name, user.get_full_name, user.phone_number))

            query.answer(text=f'{object} ‚úÖ', show_alert=True)
        else:
            object = Factory.objects.get(id=id)
            obj = FactoryApplication.objects.create(factory=object, user=user)
            context.bot.send_message(chat_id=group_username, parse_mode="html",
                                     text='<b>–ó–∞–≤–æ–¥—ã üèó</b>\n<b>{}</b>\n<b>üë§–ò–º—è:</b> {}\n<b>üìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {} '
                                     .format(object.name, user.get_full_name, user.phone_number))
            query.answer(text=f'{object} ‚úÖ', show_alert=True)
    else:
        query.answer()
        query.delete_message()
    if query.data == "home":
        keyboard = create_inline_buttons([
            {'name': "–°–ø–µ—Ü –¢–µ—Ö–Ω–∏–∫–∏ üöú", "data": "special-technique-category", "new_line": False},
            {'name': "–ó–∞–≤–æ–¥—ã üèó", "data": "factories", "new_line": True},
            {'name': "–°–µ—Ä–≤–∏—Å –¶–µ–Ω—Ç—Ä üîß", "data": "service-center", "new_line": False},
            {'name': "–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ üìí", "data": "catalog", "new_line": True},
            {'name': "–û –Ω–∞—Å üõ°", "data": "about", "new_line": False},
        ])
        query.message.reply_html("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "special-technique-category":
        special_texnique_category = SpecialTechniqueCategory.objects.all()
        keyboard = []
        for i in range(1, len(special_texnique_category) + 1, 1):
            print()
            if i % 2 == 0 and i != 0:
                keyboard.append({'name': special_texnique_category[i - 1].name,
                                 "data": "stc/" + str(special_texnique_category[i - 1].id), "new_line": True})
            else:
                keyboard.append({'name': special_texnique_category[i - 1].name,
                                 "data": "stc/" + str(special_texnique_category[i - 1].id), "new_line": False})
        keyboard.append({'name': "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "data": 'home', "new_line": True})
        query.message.reply_html("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ üöú",
                                 reply_markup=InlineKeyboardMarkup(create_inline_buttons(keyboard)))
    elif query.data == "factories":
        factory = Factory.objects.all()
        keyboard = []
        for i in range(1, len(factory) + 1, 1):
            if i % 2 == 0 and i != 0:
                keyboard.append({'name': factory[i - 1].name, "data": "f/" + str(factory[i - 1].id), "new_line": True})
            else:
                keyboard.append({'name': factory[i - 1].name, "data": "f/" + str(factory[i - 1].id), "new_line": False})

        keyboard.append({'name': "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "data": 'home', "new_line": True})
        query.message.reply_html("–ó–∞–≤–æ–¥—ã üèó", reply_markup=InlineKeyboardMarkup(create_inline_buttons(keyboard)))
    elif query.data == "about":
        about_text = """–ö–æ–º–ø–∞–Ω–∏—è –°–ü –û–û–û "<b>SPETS TEXNIKA TASHKENT</b>" (–°–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞ –¢–∞—à–∫–µ–Ω—Ç) - –∏–º–µ–µ—Ç <b>17</b> –ª–µ—Ç–Ω–∏–π –æ–ø—ã—Ç –≤ —Å—Ñ–µ—Ä–µ –ø–æ—Å—Ç–∞–≤–æ–∫ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ –ö–∏—Ç–∞—è. üöú\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∫—Ä—É–ø–Ω–µ–π—à–∏–º–∏ –∑–∞–≤–æ–¥–∞–º–∏ –ö–∏—Ç–∞—è, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ—â—å –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ –º–µ–Ω–µ–µ 1000 –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ –º–µ—Å—è—Ü. –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –í–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –∏ —Å–≤–æ–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏üõ°\n\nSTT - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ –ö–∏—Ç–∞—è üá®üá≥üá∫üáø\n\n–ù–∞—à–∏ —Å–æ—Ü.—Å–µ—Ç–∏\n<a href="https://t.me/sttuzb">Telegram</a>\n<a href="https://vm.tiktok.com/ZSJHXhsCm/">TikTok</a>\n<a href="https://www.youtube.com/channel/UCbVYAfWBA78oYYu3ei4OWcA/videos">Youtube</a>\n<a href="https://www.facebook.com/sttuzb">Facebook</a>\n<a href="https://www.instagram.com/stt_uz/">Instagram</a>"""
        keyboard = create_inline_buttons([{'name': "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "data": 'home', "new_line": True}])
        query.message.reply_html(text=about_text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "service-center":
        keyboard = create_inline_buttons([
            {'name': "‚ûï –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "data": 'plus', "new_line": True},
            {'name': "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "data": 'home', "new_line": True}
        ])
        information = "–ö–æ–º–ø–∞–Ω–∏—è –°–ü –û–û–û ¬´<b>SPETS TEXNIKA TASHKENT</b>¬ª –∏–º–µ–µ—Ç –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–π –æ–ø—ã—Ç –≤ –ø–æ—Å—Ç–∞–≤–∫–µ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏." \
                      "\n–¢–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å –¥–≤–∞ –≤–∏–¥–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –¥–∞—ë—Ç <b>1,5</b> –≥–æ–¥–∞ –≥–∞—Ä–∞–Ω—Ç–∏—é –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É." \
                      "\n–ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –∏ —Å–≤–æ–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏!" \
                      "\n    <b>1</b>.	–ú–æ–±–∏–ª—å–Ω–æ–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ù–∞—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –∏ —Å—Ç–∞–∂–µ–º –ø—Ä–∏–µ–¥—É—Ç –∫ –≤–∞–º –Ω–∞ —Å–≤–æ–∏—Ö –∞–≤—Ç–æ, —É—Å—Ç–∞–Ω–æ–≤—è—Ç –ø—Ä–∏—á–∏–Ω—É –∏ —Ç–∞–∫–∂–µ —É—Å—Ç—Ä–∞–Ω—è—Ç –µ—ë –≤ —Å–∞–º—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏." \
                      "\n    <b>2</b>.	–°–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ. \n–¢–∞–∫–∂–µ –Ω–∞—à–∏ –æ–ø—ã—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –º–æ–≥—É—Ç –≤—ã–µ—Ö–∞—Ç—å –∫ –≤–∞–º –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö." \
                      "\n–ú—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–π —Ç–µ—Ö–Ω–∏–∫–∏. –ê —Ç–∞–∫–∂–µ –±—É–¥–µ–º —Ä–∞–¥—ã –í–∞–º –ø–æ–º–æ—á—å!"
        query.message.reply_html(text=information, reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "catalog":
        keyboard = create_inline_buttons([
            {'name': "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "data": 'home', "new_line": True}
        ])
        file = open(str(settings.MEDIA_ROOT) + "/catalog.pdf", 'rb')
        query.message.reply_document(document=file, reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data.split('/')[0] == 'f':
        id = int(query.data.split('/')[1])
        object = Factory.objects.get(id=id)
        image = open(str(settings.MEDIA_ROOT) + "/" + str(object.image), 'rb')
        keyboard = create_inline_buttons([
            {'name': "‚ûï –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "data": f'rf/{id}', "new_line": False},
            {'name': "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "data": 'home', "new_line": False},
        ])
        query.message.reply_photo(photo=image, caption=f"<b>{object.name}</b>\n{object.description_bot}", parse_mode="HTML",
                                  reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.split('/')[0] == "stc":
        id = int(query.data.split('/')[1])
        category = SpecialTechniqueCategory.objects.get(id=id)
        special_texniques = SpecialTechnique.objects.filter(category=category)
        keyboard = []
        for i in range(len(special_texniques)):

            last_id = special_texniques.last().id
            print(last_id, special_texniques[i].id)
            if i % 2 == 0 and i != 0:
                keyboard.append(
                    {'name': special_texniques[i].name, "data": "st/" + str(id) + "/" + str(special_texniques[i].id),
                     "new_line": True})
            else:
                new_line = False
                if special_texniques[i].id == last_id:
                    new_line = True
                keyboard.append(
                    {'name': special_texniques[i].name, "data": "st/" + str(id) + "/" + str(special_texniques[i].id),
                     "new_line": new_line})

        keyboard.append({'name': "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "data": 'home', "new_line": False, "menu": True})
        keyboard.append({'name': "–ù–∞–∑–∞–¥", "data": 'special-technique-category', "new_line": False, "menu": True})

        query.message.reply_html(f"{category.name}", reply_markup=InlineKeyboardMarkup(create_inline_buttons(keyboard)))

    elif query.data.split('/')[0] == 'st':
        keyboard = []
        id = int(query.data.split('/')[2])
        object = SpecialTechnique.objects.get(id=id)
        image = open(str(settings.MEDIA_ROOT) + "/" + str(object.image), 'rb')

        keyboard.append({'name': "‚ûï –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "data": f'rst/{id}', "new_line": False})
        keyboard.append({'name': "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "data": 'home', "new_line": False})
        keyboard.append({'name': "–ù–∞–∑–∞–¥ –°–ø–µ—Ü –¢–µ—Ö–Ω–∏–∫–∏", "data": 'special-technique-category', "new_line": True})
        keyboard.append({'name': "–ù–∞–∑–∞–¥", "data": 'stc/' + query.data.split('/')[1], "new_line": False})
        text = f"\n\n{object.description_bot}" if object.description_bot else ""
        query.message.reply_photo(photo=image, caption=f"<b>{object.name}</b>{text}", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(create_inline_buttons(keyboard)))


def registerContact(update: Update, context: CallbackContext) -> None:
    global echo_field, users
    user_id = update.message.from_user.id
    e_field = echo_field.get(f"{user_id}")
    if e_field == "phone":
        users[f'{user_id}'].phone_number = update.message.contact.phone_number
        echo_field[f'{user_id}'] = None
        users[f'{user_id}'].save()
        del echo_field[f'{user_id}']
        del users[f'{user_id}']
        start(update, context)


class Command(BaseCommand):
    help = "Telegram bot"

    def handle(self, *args, **options):
        request = Request(
            connect_timeout=0.5,
            read_timeout=1.0,
        )

        bot = Bot(
            request=request,
            token=settings.TOKEN,
            base_url=settings.PROXY_URL,
        )

        updater = Updater(
            bot=bot,
            use_context=True,
        )
        updater.dispatcher.add_handler(CommandHandler('start', start))
        updater.dispatcher.add_handler(CallbackQueryHandler(inline_buttons))
        updater.dispatcher.add_handler(MessageHandler(Filters.contact, registerContact))
        updater.dispatcher.add_handler(MessageHandler(Filters.text, echo))

        updater.start_polling()
        updater.idle()
